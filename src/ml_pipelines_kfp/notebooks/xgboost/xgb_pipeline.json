{
  "components": {
    "comp-condition-1": {
      "dag": {
        "tasks": {
          "deploy": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-deploy"
            },
            "inputs": {
              "artifacts": {
                "model": {
                  "componentInputArtifact": "pipelinechannel--train-model-model"
                }
              },
              "parameters": {
                "project": {
                  "runtimeValue": {
                    "constant": "deeplearning-sahil"
                  }
                },
                "region": {
                  "runtimeValue": {
                    "constant": "us-central1"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "deploy"
            }
          }
        }
      },
      "inputDefinitions": {
        "artifacts": {
          "pipelinechannel--train-model-model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "pipelinechannel--eval-model-deploy": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-deploy": {
      "executorLabel": "exec-deploy",
      "inputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "project": {
            "parameterType": "STRING"
          },
          "region": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-eval-model": {
      "executorLabel": "exec-eval-model",
      "inputDefinitions": {
        "artifacts": {
          "test_set": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          },
          "xgb_model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "metrics": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          },
          "smetrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "deploy": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-get-data": {
      "executorLabel": "exec-get-data",
      "outputDefinitions": {
        "artifacts": {
          "dataset_test": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          },
          "dataset_train": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-train-model": {
      "executorLabel": "exec-train-model",
      "inputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-deploy": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "deploy"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform==1.3.0' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef deploy(\n    model: Input[Model],\n    project: str,\n    region: str,):\n\n  import logging\n  from google.cloud import aiplatform\n  aiplatform.init(project=project, location=region)\n\n  logging.basicConfig(level=logging.DEBUG)\n  logging.debug(model)\n\n  print(model)\n  print(model.uri)\n\n  import os\n  path,file = os.path.split(model.uri)\n  print(path)\n  logging.info(path)\n  import datetime\n\n  # datetime.datetime.now().strftime('%Y%m%d%H%M%S')\n  # serving image https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers#xgboost\n  deployed_model = aiplatform.Model.upload(\n        display_name=\"xgboost-pipeline\",\n        artifact_uri = path,\n        serving_container_image_uri=\"us-docker.pkg.dev/vertex-ai/prediction/xgboost-cpu.1-4:latest\"\n  )\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-eval-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "eval_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.0.0' 'numpy==1.23.0' 'xgboost==1.7.5' 'scikit-learn==1.5.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef eval_model(\n    test_set: Input[Dataset],\n    xgb_model: Input[Model],\n    metrics: Output[ClassificationMetrics],\n    smetrics: Output[Metrics]\n) -> NamedTuple(\"Outputs\", [(\"deploy\", str)]):\n    from xgboost import XGBClassifier\n    import pandas as pd\n    import numpy as np\n    import joblib\n\n    data = pd.read_csv(test_set.path)\n    #model = XGBClassifier()\n    #model.load_model(xgb_model.path)\n    model = joblib.load(xgb_model.path+'.joblib')\n    score = model.score(\n        data.drop(columns=[\"target\"]),\n        data.target,\n    )\n\n    from sklearn.metrics import roc_curve\n    y_scores =  model.predict_proba(data.drop(columns=[\"target\"]))[:, 1]\n    fpr, tpr, thresholds = roc_curve(\n         y_true=data.target.to_numpy(), y_score=y_scores, pos_label=True\n    )\n    # Create a mask for non-Infinity thresholds\n    valid_mask = ~np.isinf(thresholds)\n\n    # Apply the mask to filter out Infinity values\n    fpr = fpr[valid_mask]\n    tpr = tpr[valid_mask]\n    thresholds = thresholds[valid_mask]\n\n    metrics.log_roc_curve(fpr.tolist(), tpr.tolist(), thresholds.tolist())\n\n    from sklearn.metrics import confusion_matrix\n    y_pred = model.predict(data.drop(columns=[\"target\"]))\n\n    metrics.log_confusion_matrix(\n       [\"False\", \"True\"],\n       confusion_matrix(\n           data.target, y_pred\n       ).tolist()\n    )\n\n    xgb_model.metadata[\"test_score\"] = float(score)\n    smetrics.log_metric(\"score\", float(score))\n\n\n    deploy = \"true\"\n    #compare threshold or to previous\n\n    return (deploy,)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-get-data": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "get_data"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.0.0' 'scikit-learn==1.5.1' 'numpy==1.23.0' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef get_data(\n    dataset_train: Output[Dataset],\n    dataset_test: Output[Dataset],\n):\n\n    from sklearn import datasets\n    from sklearn.model_selection import train_test_split as tts\n    import pandas as pd\n\n\n    # dataset https://www.kaggle.com/uciml/breast-cancer-wisconsin-data\n    data_raw = datasets.load_breast_cancer()\n    data = pd.DataFrame(data_raw.data, columns=data_raw.feature_names)\n    data[\"target\"] = data_raw.target\n\n    train, test = tts(data, test_size=0.3)\n\n    train.to_csv(dataset_train.path)\n    test.to_csv(dataset_test.path)\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-train-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "train_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.0.0' 'numpy==1.23.0' 'xgboost==1.7.5' 'scikit-learn==1.5.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef train_model(\n    dataset: Input[Dataset],\n    model: Output[Model]\n):\n\n    from xgboost import XGBClassifier\n    import pandas as pd\n    import joblib\n    import logging\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    data = pd.read_csv(dataset.path)\n\n    xgb_model = XGBClassifier(\n        objective=\"binary:logistic\"\n    )\n    xgb_model.fit(\n        data.drop(columns=[\"target\"]),\n        data.target,\n    )\n\n    score = xgb_model.score(\n        data.drop(columns=[\"target\"]),\n        data.target,\n    )\n\n    model.metadata[\"train_score\"] = float(score)\n    model.metadata[\"framework\"] = \"XGBoost\"\n\n    print(model.path)\n\n    #model.save_model(model_artifact.path)\n    joblib.dump(xgb_model, model.path+'.joblib')\n\n"
          ],
          "image": "python:3.9"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "xgboost-pipeline-with-deployment"
  },
  "root": {
    "dag": {
      "tasks": {
        "condition-1": {
          "componentRef": {
            "name": "comp-condition-1"
          },
          "dependentTasks": [
            "eval-model",
            "train-model"
          ],
          "inputs": {
            "artifacts": {
              "pipelinechannel--train-model-model": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "model",
                  "producerTask": "train-model"
                }
              }
            },
            "parameters": {
              "pipelinechannel--eval-model-deploy": {
                "taskOutputParameter": {
                  "outputParameterKey": "deploy",
                  "producerTask": "eval-model"
                }
              }
            }
          },
          "taskInfo": {
            "name": "deploy"
          },
          "triggerPolicy": {
            "condition": "inputs.parameter_values['pipelinechannel--eval-model-deploy'] == 'true'"
          }
        },
        "eval-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-eval-model"
          },
          "dependentTasks": [
            "get-data",
            "train-model"
          ],
          "inputs": {
            "artifacts": {
              "test_set": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "dataset_test",
                  "producerTask": "get-data"
                }
              },
              "xgb_model": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "model",
                  "producerTask": "train-model"
                }
              }
            }
          },
          "taskInfo": {
            "name": "eval-model"
          }
        },
        "get-data": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-get-data"
          },
          "taskInfo": {
            "name": "get-data"
          }
        },
        "train-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-train-model"
          },
          "dependentTasks": [
            "get-data"
          ],
          "inputs": {
            "artifacts": {
              "dataset": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "dataset_train",
                  "producerTask": "get-data"
                }
              }
            }
          },
          "taskInfo": {
            "name": "train-model"
          }
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.13.0"
}